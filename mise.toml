# mise.toml - Tauri MCP Server Project Configuration
# =================================================================
# This configuration manages a dual-artifact project:
# 1. Tauri Plugin (Rust) -> target/release/
# 2. MCP TypeScript Server -> mcp-server-ts/build/
#
# Task Dependency Hierarchy:
# - install:* tasks run in parallel (no dependencies)
# - build:* tasks depend on their respective install tasks
# - build task depends on both build:plugin and build:mcp
# - publish:* tasks depend on their respective build tasks
# - publish task depends on both publish:plugin and publish:mcp
#
# The configuration uses file-based triggers (sources/outputs) for
# intelligent caching and rebuilds only when necessary.
# =================================================================

# =================================================================
# TOOL MANAGEMENT
# =================================================================
# Mise manages all required tools for the project. This ensures
# consistent tooling across all development environments.

[tools]
node = "latest"                   # For plugin guest-js building
bun = "latest"                    # For MCP TypeScript server
python = "latest"                 # For build.py and publish.py scripts
cargo = "latest"                  # For Rust plugin compilation
"cargo:cargo-binstall" = "latest" # For fast binary installation
"pipx:uv" = "latest"              # Modern Python package manager

# =================================================================
# ENVIRONMENT VARIABLES
# =================================================================
# Set common environment variables for consistent builds

[env]
RUST_BACKTRACE = "1"
CARGO_INCREMENTAL = "1"
# MCP Server Configuration
TAURI_MCP_SSE_PORT = "8467"
TAURI_MCP_SSE_HOST = "127.0.0.1"
TAURI_MCP_PIDFILE = ".mise/tauri-mcp-server.pid"

# =================================================================
# INSTALLATION TASKS
# =================================================================
# These tasks install dependencies and can run in parallel.
# They are idempotent and use file-based caching.

[tasks."install:plugin"]
description = "Install Rust dependencies for Tauri plugin"
run = "cargo fetch"
sources = ["Cargo.toml", "Cargo.lock"]
outputs = ["target/.cargo-fetch-stamp"]

[tasks."install:plugin-js"]
description = "Install JavaScript dependencies for plugin guest code"
run = "bun install"
sources = ["package.json", "bun.lock"]
outputs = ["node_modules/.install-stamp"]

[tasks."install:mcp"]
description = "Install TypeScript dependencies for MCP server"
run = "cd mcp-server-ts && bun install"
sources = ["mcp-server-ts/package.json", "mcp-server-ts/bun.lock"]
outputs = ["mcp-server-ts/node_modules/.install-stamp"]

[tasks."install:python"]
description = "Install Python dependencies (if requirements exist)"
run = """
if [ -f requirements.txt ]; then
  uv pip install -r requirements.txt
elif [ -f pyproject.toml ]; then
  uv pip install -e .
fi
"""
sources = ["requirements.txt", "pyproject.toml"]
outputs = [".venv/.install-stamp"]

[tasks.install]
description = "Install all project dependencies in parallel"
depends = [
  "install:plugin",
  "install:plugin-js",
  "install:mcp",
  "install:python",
]

# =================================================================
# BUILD TASKS
# =================================================================
# Hierarchical build tasks with proper dependency management.
# Each build task specifies sources and outputs for caching.

[tasks."build:plugin"]
description = "Build Tauri plugin (Rust) in release mode"
run = "python3 build.py plugin --release"
sources = ["src/**/*.rs", "Cargo.toml", "Cargo.lock", "build.rs"]
outputs = [
  "target/release/libtauri_plugin_mcp.*",
  "target/release/*.d",
  "target/release/*.rlib",
]
depends = ["install:plugin"]

[tasks."build:plugin-js"]
description = "Build JavaScript guest bindings for plugin"
run = "bun run build"
sources = [
  "guest-js/**/*.ts",
  "guest-js/**/*.js",
  "rollup.config.js",
  "tsconfig.json",
]
outputs = ["dist-js/**/*"]
depends = ["install:plugin-js"]

[tasks."build:mcp"]
description = "Build MCP TypeScript server"
run = "python3 build.py mcp"
sources = [
  "mcp-server-ts/src/**/*.ts",
  "mcp-server-ts/tsconfig.json",
  "mcp-server-ts/package.json",
]
outputs = ["mcp-server-ts/build/**/*"]
depends = ["install:mcp"]

[tasks.build]
description = "Build all project artifacts (plugin + MCP server)"
depends = ["build:plugin", "build:plugin-js", "build:mcp"]

[tasks.default]
alias = "build"

# =================================================================
# DEVELOPMENT TASKS
# =================================================================
# Tasks for development workflow including watching and testing

[tasks.dev]
description = "Start development mode with file watching"
run = """
echo "Starting development mode..."
echo "This will watch for changes and rebuild automatically"
mise watch -t build
"""

[tasks."test:plugin"]
description = "Run Rust tests for Tauri plugin"
run = "cargo test --all-features"
depends = ["install:plugin"]

[tasks.test]
description = "Run all tests"
depends = ["test:plugin"]

[tasks.check]
description = "Run code quality checks (clippy, format check)"
run = """
echo "Running cargo clippy..."
cargo clippy --all-features --all-targets -- -D warnings
echo "Checking formatting..."
cargo fmt -- --check
"""
depends = ["install:plugin"]

[tasks.fmt]
description = "Format all code (Rust and TypeScript)"
run = """
echo "Formatting Rust code..."
cargo fmt
echo "Formatting TypeScript code..."
cd mcp-server-ts && bun run format 2>/dev/null || echo "No format script found"
"""

# =================================================================
# PUBLISHING TASKS
# =================================================================
# Publishing tasks with strict dependency chains to ensure
# artifacts are built before publishing.

[tasks."publish:plugin"]
description = "Publish Tauri plugin to crates.io"
run = "python3 publish.py plugin --bump patch"
depends = ["build:plugin", "test:plugin"]

[tasks."publish:mcp"]
description = "Publish MCP server to npm registry"
run = "python3 publish.py mcp --bump patch"
depends = ["build:mcp"]

[tasks.publish]
description = "Publish all artifacts (plugin + MCP server)"
depends = ["publish:plugin", "publish:mcp"]

# Alternative bump versions
[tasks."publish:plugin-minor"]
description = "Publish Tauri plugin with minor version bump"
run = "python3 publish.py plugin --bump minor"
depends = ["build:plugin", "test:plugin"]

[tasks."publish:plugin-major"]
description = "Publish Tauri plugin with major version bump"
run = "python3 publish.py plugin --bump major"
depends = ["build:plugin", "test:plugin"]

[tasks."publish:mcp-minor"]
description = "Publish MCP server with minor version bump"
run = "python3 publish.py mcp --bump minor"
depends = ["build:mcp"]

[tasks."publish:mcp-major"]
description = "Publish MCP server with major version bump"
run = "python3 publish.py mcp --bump major"
depends = ["build:mcp"]

# =================================================================
# UTILITY TASKS
# =================================================================
# Maintenance and utility tasks

[tasks.clean]
description = "Remove all build artifacts and dependencies"
run = """
echo "Cleaning build artifacts..."
rm -rf target/
rm -rf dist-js/
rm -rf mcp-server-ts/build/
rm -rf node_modules/
rm -rf mcp-server-ts/node_modules/
rm -rf .venv/
cargo clean
echo "Clean complete!"
"""

[tasks."clean:build"]
description = "Remove only build artifacts (keep dependencies)"
run = """
echo "Cleaning build artifacts only..."
rm -rf target/release/
rm -rf target/debug/
rm -rf dist-js/
rm -rf mcp-server-ts/build/
echo "Build artifacts cleaned!"
"""

[tasks.verify]
description = "Full verification: clean, install, build, test"
depends = ["clean", "install"]
wait_for = ["install"]
depends_post = ["build", "test", "check"]

[tasks.doctor]
description = "Check development environment health"
run = """
echo "=== Development Environment Health Check ==="
echo ""
echo "Tool Versions:"
echo "  Node: $(node --version)"
echo "  Bun: $(bun --version)"
echo "  Rust: $(rustc --version)"
echo "  Cargo: $(cargo --version)"
echo "  Python: $(python3 --version)"
echo ""
echo "Project Structure:"
echo "  Tauri Plugin Source: $([ -d src ] && echo '✓' || echo '✗')"
echo "  MCP Server Source: $([ -d mcp-server-ts/src ] && echo '✓' || echo '✗')"
echo "  Build Scripts: $([ -f build.py ] && echo '✓' || echo '✗')"
echo "  Publish Scripts: $([ -f publish.py ] && echo '✓' || echo '✗')"
echo ""
echo "Dependencies:"
echo "  Plugin dependencies: $([ -d target ] && echo '✓' || echo '✗ (run: mise run install:plugin)')"
echo "  Plugin JS dependencies: $([ -d node_modules ] && echo '✓' || echo '✗ (run: mise run install:plugin-js)')"
echo "  MCP dependencies: $([ -d mcp-server-ts/node_modules ] && echo '✓' || echo '✗ (run: mise run install:mcp)')"
echo ""
echo "Build Outputs:"
echo "  Plugin binary: $([ -f target/release/libtauri_plugin_mcp.so ] || [ -f target/release/libtauri_plugin_mcp.dylib ] || [ -f target/release/tauri_plugin_mcp.dll ] && echo '✓' || echo '✗ (run: mise run build:plugin)')"
echo "  Plugin JS dist: $([ -d dist-js ] && [ -n "$(ls -A dist-js 2>/dev/null)" ] && echo '✓' || echo '✗ (run: mise run build:plugin-js)')"
echo "  MCP server build: $([ -d mcp-server-ts/build ] && [ -n "$(ls -A mcp-server-ts/build 2>/dev/null)" ] && echo '✓' || echo '✗ (run: mise run build:mcp)')"
echo ""
echo "=== End Health Check ==="
"""

[tasks.ls]
description = "List all available mise tasks with descriptions"
run = "mise tasks ls"

# =================================================================
# QUICK ALIASES
# =================================================================
# Convenient shortcuts for common operations

[tasks.b]
alias = "build"

[tasks.t]
alias = "test"

[tasks.c]
alias = "clean"

[tasks.i]
alias = "install"

[tasks.p]
alias = "publish"

# =================================================================
# MCP SERVER MANAGEMENT
# =================================================================
# Tasks for managing the Tauri MCP SSE server automatically

[tasks."mcp:start"]
description = "Start the Tauri MCP SSE server in background"
run = '''
#!/bin/bash
set -euo pipefail

PIDFILE="${TAURI_MCP_PIDFILE}"
PORT="${TAURI_MCP_SSE_PORT:-8467}"
HOST="${TAURI_MCP_SSE_HOST:-127.0.0.1}"

# Create .mise directory if it doesn't exist
mkdir -p "$(dirname "$PIDFILE")"

# Check if server is already running
if [[ -f "$PIDFILE" ]] && kill -0 "$(cat "$PIDFILE")" 2>/dev/null; then
    echo "✓ Tauri MCP SSE server already running on http://$HOST:$PORT/sse (PID: $(cat "$PIDFILE"))"
    exit 0
fi

# Build the MCP server if needed
if [[ ! -f "mcp-server-ts/build/index.js" ]] || [[ "mcp-server-ts/src/index.ts" -nt "mcp-server-ts/build/index.js" ]]; then
    echo "🔨 Building MCP server..."
    cd mcp-server-ts && bun run build && cd ..
fi

# Start the server in background
echo "🚀 Starting Tauri MCP SSE server on http://$HOST:$PORT/sse..."
nohup node mcp-server-ts/build/index.js --transport sse --host "$HOST" --port "$PORT" \
    > .mise/tauri-mcp-server.log 2>&1 &

# Save PID
echo $! > "$PIDFILE"

# Wait a moment and verify it started
sleep 2
if kill -0 "$(cat "$PIDFILE")" 2>/dev/null; then
    echo "✅ Tauri MCP SSE server started successfully (PID: $(cat "$PIDFILE"))"
    echo "📋 Logs: tail -f .mise/tauri-mcp-server.log"
    echo "🌐 Endpoint: http://$HOST:$PORT/sse"
else
    echo "❌ Failed to start Tauri MCP SSE server"
    rm -f "$PIDFILE"
    exit 1
fi
'''
depends = ["build:mcp"]

[tasks."mcp:stop"]
description = "Stop the Tauri MCP SSE server"
run = '''
#!/bin/bash
set -euo pipefail

PIDFILE="${TAURI_MCP_PIDFILE}"

if [[ ! -f "$PIDFILE" ]]; then
    echo "ℹ️  Tauri MCP SSE server is not running (no PID file)"
    exit 0
fi

PID=$(cat "$PIDFILE")
if ! kill -0 "$PID" 2>/dev/null; then
    echo "ℹ️  Tauri MCP SSE server is not running (stale PID file)"
    rm -f "$PIDFILE"
    exit 0
fi

echo "🛑 Stopping Tauri MCP SSE server (PID: $PID)..."
kill "$PID"

# Wait for graceful shutdown
for i in {1..10}; do
    if ! kill -0 "$PID" 2>/dev/null; then
        break
    fi
    sleep 0.5
done

# Force kill if still running
if kill -0 "$PID" 2>/dev/null; then
    echo "⚠️  Force killing server..."
    kill -9 "$PID"
fi

rm -f "$PIDFILE"
echo "✅ Tauri MCP SSE server stopped"
'''

[tasks."mcp:restart"]
description = "Restart the Tauri MCP SSE server"
run = "mise run mcp:stop && mise run mcp:start"

[tasks."mcp:status"]
description = "Check Tauri MCP SSE server status"
run = '''
#!/bin/bash
set -euo pipefail

PIDFILE="${TAURI_MCP_PIDFILE}"
PORT="${TAURI_MCP_SSE_PORT:-8467}"
HOST="${TAURI_MCP_SSE_HOST:-127.0.0.1}"

if [[ ! -f "$PIDFILE" ]]; then
    echo "❌ Tauri MCP SSE server is not running (no PID file)"
    exit 1
fi

PID=$(cat "$PIDFILE")
if ! kill -0 "$PID" 2>/dev/null; then
    echo "❌ Tauri MCP SSE server is not running (stale PID file)"
    rm -f "$PIDFILE"
    exit 1
fi

echo "✅ Tauri MCP SSE server is running"
echo "   PID: $PID"
echo "   Endpoint: http://$HOST:$PORT/sse"
echo "   Logs: tail -f .mise/tauri-mcp-server.log"

# Test the endpoint
if command -v curl >/dev/null 2>&1; then
    echo "   Testing endpoint..."
    if timeout 3 curl -s "http://$HOST:$PORT/sse" >/dev/null; then
        echo "   ✅ Endpoint is responding"
    else
        echo "   ⚠️  Endpoint is not responding"
    fi
fi
'''

[tasks."mcp:logs"]
description = "Show Tauri MCP SSE server logs"
run = '''
if [[ -f ".mise/tauri-mcp-server.log" ]]; then
    tail -f .mise/tauri-mcp-server.log
else
    echo "❌ No log file found. Is the server running?"
    exit 1
fi
'''

[tasks."mcp:configure-claude"]
description = "Configure Claude Code to use the Tauri MCP server"
run = '''
#!/bin/bash
set -euo pipefail

WRAPPER_PATH="$(pwd)/scripts/tauri-mcp-wrapper.sh"

echo "🔧 Configuring Claude Code for Tauri MCP Server..."

# Remove any existing configurations
claude mcp remove tauri-plugin 2>/dev/null || true
claude mcp remove tauri-mcp 2>/dev/null || true
claude mcp remove tauri-mcp-sse 2>/dev/null || true

# Add the new configuration
claude mcp add tauri-mcp "$WRAPPER_PATH"

echo "✅ Claude Code configured successfully!"
echo ""
echo "📋 Configuration details:"
echo "   Server name: tauri-mcp"
echo "   Command: $WRAPPER_PATH"
echo "   Transport: stdio"
echo ""
echo "🧪 Test the connection:"
echo "   claude mcp list"
echo ""
echo "💡 The wrapper script automatically finds npx and works around PATH issues."
'''
